# This is the base compose file. GPU specifications will be overriden by others
services:
  rosdev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ros2_dev
    network_mode: host
    privileged: true
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1        # (optional, avoids some shared memory issues)
      - XDG_RUNTIME_DIR=/tmp/runtime-ubuntu
    volumes:
      - type: bind
        source: /dev/input
        target: /dev/input
        read_only: true
        bind:
          propagation: rshared     # lets hot-plugged jsX/eventX devices flow in
      - type: bind                 # udev database
        source: /run/udev
        target: /run/udev
        read_only: true
        bind:
          propagation: rshared
      - ../..:/workspaces:rw        # Current workspace read/write
      - "/dev:/dev"                 # All devices
    cap_add:
      - SYS_NICE               # For real-time scheduling
    devices:
      - /dev/input:/dev/input:ro # All input devices read only
    tty: true
    stdin_open: true
    group_add:
      - dialout


  docker_git:
      image: alpine/git:latest      # Small image with git
      container_name: articubot_git
      volumes:
        - ~/.ssh:/root/.ssh:ro      # Mount host SSH keys (read-only)
        - ~/.gitconfig:/root/.gitconfig:ro  # Mount host Git config (read-only)
      network_mode: host            # share network (optional; not strictly needed for git)
      entrypoint: "/bin/sh"
      # This container is used on-demand for Git operations, e.g.:
      # `docker-compose run docker_git git push`

# Bring vscode extensions with you into the docker environment
volumes:
  vscode_cache:

# Commands for composing:
# docker compose -f docker-compose.yaml -f docker-compose.nvidia.yaml up -d
# docker compose -f docker-compose.yaml -f docker-compose.amd.yaml up -d
#
# Only do one of the above then run docker compose exec rosdev /bin/bash
# Then use vscode containers->right click on ros2_dev->attach in current window